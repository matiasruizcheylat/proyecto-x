[
  {
 "pregunta": "1 ¿Qué es Axios? De una opinión de la librería",
 "respuesta": "\n Es una librería de javascript la cual se ejecuta en el navegador y nos permite hacer peticiones en HTTP como clientes. Se pueden hacer operaciones sencillas como cliente en HTTP haciendo solicitudes al servidor y recibiendo respuestas para ello sencillas a operar.\nA forma de solicitar los datos., axios nos lo devuelve en objetos de formato json. Es una forma además de solicitar datos de las API.\nA forma de solicitar los datos., axios nos lo devuelve en objetos de formato json. Es una forma además de solicitar datos de las API.\n\nPersonalmente hablando trabajé un poco con axios., las cosas que vi son que es muy sencillo pegarle a una api utilizando axios.\nEj: en un componente de vue por ejemplo queremos una lista de usuarios extraídos de un api. Se podría hacer la petición en un hook que sea tipo created(){} que sea async (asincrónico) y con un await en la instrucción para pegarle a la api. Que esté encerrado en un try{} catch por si falla la petición a la API no se quede tiempo indefinido.\nTambién además de hacer peticiones de read, se pueden hacer inserciones, modificaciones y eliminación de elementos por lo que vi."
  },
  {
 "pregunta": "2 ¿Que se diferencia de Jquery con Axios?",
 "respuesta": "\n   Tanto jQuery como axios son librerías de Javascript.  La diferencia más conocida es que jQuery es más antigua que axios y es una librería demasiado pesada en tamaño. Jquery Separa javascript de html y ofrece una manera mucho más sencilla de programar las funciones en js. Vue es un framework que hace algo similar a jQuery. Con Jquery se aplica ajax para hacer peticiones al servidor.\n Axios es otra forma de hacer peticiones al servidor y el comportamiento es similar a Ajax. Pero como se dice la diferencia está en la complejidad que supone implementar ajax a la hora de programar y además utilizar jQuery con ajax implica trabajar con una librería de un tamaño muy pesado a comparación con axios.\n  La librería axios es mucho más sencilla y más liviana a la hora de hacer peticiones http. Es por tanto más aconsejable, y una tendencia más frecuente en estos últimos años el hecho empezar a utilizar axios con algún framework como vue , por sobre ajax y jquery."
  }
,
  {
 "pregunta": "3 ¿Por qué es importante controlar el almacenamiento de datos del lado del cliente?",
 "respuesta": "\n Ya desde las cookies se almacenan datos en el cliente. La importancia radica en muchas cuestiones. Una de ellas es por ejemplo: que el usuario esté logueado y para ello se puede almacenar su información en una cookie., de esta manera se evita que al recargar cada página se tenga que loguear nuevamente el usuario.\n Además el hecho de almacenar datos del lado del cliente es una forma de mejorar el rendimiento de la aplicación. De esa forma se evita tener que solicitar datos desde el servidor cada vez que el usuario necesite. En cookies, local storage o sessionStorage entre otras se almacenan datos en el cliente."
  }
,
  {
 "pregunta": "4 ¿Qué es Vuex? Investigue cómo integrarlo en un cliente desarrollado en Vue.",
 "respuesta": "\n  Vuex es una librería de Vue la cual gestiona estados. Es una forma de compartir datos entre componentes más accesible (no necesariamente sencilla). Cuando se comparten datos entre componentes e hijos se utilizan las props. El problema surge cuando se quiere cambiar la jerarquía de componentes., se deben considerar todas las props y esto es una forma poco práctica para hacer tareas de mantenimiento de sistemas. Por tanto una forma práctica de compartir datos de forma más centralizada es con el uso de Vuex.\n Vuex se sirve de una tienda global denominada Store la cual es centralizada para todos los compoenntes de su aplicación. Aprovecha su sistema de reactividad para actualizaciones inmediatas. Store está diseñada de tal forma que no es posible cambiar su Estado (state) desde cualquier componente.\nLas secciones principales son 4:\n[1-State]: es el estado del objeto.\n[2-Getter]: funciones las cuales obtienen datos del state.\n[3-actions]: Son funciones las cuales tienen la lógica de negocio. Puede llamar a las mutations.\n[4- mutations]: Son funciones y es el único método por el cual se puede cambiar de estado. Estas son síncronas.\n\nUna forma de comprender cómo funciona es ver en un ejemplo.\nUn usuario a la hora de loguearse.\nDesde un componente login que se especializa en iniciar la sesión de usuario en vez de generar el login en dicho componente se puede comunicar el mismo mediante alguna action o getter al Store de vuex. En un action  en el store pueden llegar como parámetros la info del usuario (sus credenciales) y el mismo hacer el logueo. (dicha action puede autenticar al usuario si sus credenciales son correctas)., el action de login se comunica con una mutation del store de vuex la cual asigna a una variable (inicialmente user:null) el estado del usuario (en este caso la info de dicho usuario). De esta manera queda almacenado el usuario autenticado con su información.\nPara que el usuario quede logueado en todas las urls., desde el componente padre (Antes de instanciar vue y el componente store) es que se puede hacer un llamado al store.dispatch(“getUser”) en donde se consulta por el usuario logueado en caso que exista.\nDel mismo modo se puede implementar un botón denominado logout el cual cambia el estado del usuario (user:null) y de este modo está deslogueado.\n  Por lo general el botón de login y logout los definimos en un componente padre en vue y los mismos se habilitan o no dependiendo si el usuario está autenticado o no.\nDespués en caso por ejemplo de que el usuario debe estar autenticado en determinadas urls, o bien para determinados componentes de vue se puede consultar por el usuario (si está logueado) al store directamente y de este modo mostrar o no dichos componentes o hacer redirecciones., todo depende de lo que se quiera implementar... ... ...\n"
  }


]